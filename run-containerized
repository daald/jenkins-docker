#!/usr/bin/env bash
# See https://github.com/kabisaict/jenkins-docker for more information.
#
# Usage:
# run-containerized [CI command]
#
# Examples:
# run-containerized 'bin/ci'
# run-containerized 'mvn clean install'
set -o pipefail
set -e
trap cleanupContainer EXIT

function cleanupContainer() {
  if [ -n "$CID" ]; then
    echo "Cleaning up docker container" >&2
    docker kill $CID > /dev/null
  fi
}

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
NORMAL="$(tput sgr 0)"

function abort() {
  echo "${RED}ERROR: $1${NORMAL}" >&2
  exit 1
}

# check environment (jenkins standard envvars)
[ -n "$JOB_NAME" ]  || abort "envvar \$JOB_NAME not initialized"
[ -n "$WORKSPACE" ] || abort "envvar \$WORKSPACE not initialized"

# support for privileged actions
if [ "$1" = "--privileged" ]; then
  shift
  DOCKER_OPTS="$DOCKER_OPTS --privileged"
fi

# Forward the SSH agent to the Docker container, useful in combination with
# https://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin
if [ -n "$SSH_AUTH_SOCK" ]; then
  DOCKER_OPTS="$DOCKER_OPTS -v $SSH_AUTH_SOCK:/tmp/auth.sock -e SSH_AUTH_SOCK=/tmp/auth.sock -e DISPLAY=:0"
fi

# Where to store cachable artifacts. Docker containers ran by this script get
# a /cache directory that's unique to the job and can be used to store any build
# artifacts that should persist across builds. Think about Ruby gems, the local
# Java Maven repository etc.
if [ -n "$CACHE_DIR" ]; then
  [ -d "$CACHE_DIR" ] || abort "\$CACHE_DIR $CACHE_DIR doesn't exist"
elif [ -d "/ci/cache" ]; then
  CACHE_DIR=/ci/cache
else
  CACHE_DIR=~/.ci-cache
  mkdir -p "$CACHE_DIR"
fi
BUILD_CACHE_DIR="$CACHE_DIR/$JOB_NAME"
[ -d "$BUILD_CACHE_DIR" ] || mkdir "$BUILD_CACHE_DIR"

# Projects that want to use this setup should maintain a Dockerfile in dockerfiles/ci
# that describes the required build environment.
DOCKER_CONTEXT_DIR="${DOCKER_CONTEXT_DIR:-$WORKSPACE/dockerfiles/ci}"

if [ ! -d "$DOCKER_CONTEXT_DIR" ]; then
  abort "No Dockerfile found at $DOCKER_CONTEXT_DIR"
fi

cd $DOCKER_CONTEXT_DIR

# Deduce a tag name for the container we're going to build based on the Jenkins job name
DOCKER_TAG_NAME=$(echo $JOB_NAME | tr '[:upper:]' '[:lower:]' | sed 's/[^-a-z0-9_.]//g')

# copy stdout to a new fd so we can display and capture it
exec 5>&1

echo "Building $DOCKER_TAG_NAME Docker image, this can take some time..." >&2
BUILD=$(docker build -t $DOCKER_TAG_NAME . | tee >(cat - >&5))
[ $? -eq 0 ] || abort "Docker image failed to build, check your Dockerfile."

# Determine the image ID we've just built
DOCKER_IMG="${BUILD##* }"
[ -n "$DOCKER_IMG" ] || abort "Unable to get image id"

# Now actually run the Docker container.
# We mount the jobs workspace under /workspace and a directory to store build
# caches/artifacts under /cache.
#
# Additional Docker CLI options can be passed in by setting a DOCKER_OPTS environment
# variable.
#
# If the container contains a /usr/local/bin/init-container script we execute this first,
# before executing the actual CI command. Use this to start services like Postgres, Redis etc,
# or to run other dynamic configuration of the build environment.
#
# After the CI build has finished we chown the workspace to user executing this script.
# In practise this means the workspace is properly owned by the user running Jenkins.
#
# Note that containers are run detached because due to how the Docker CLI works it's
# not trivial to cleanup the Docker container when the Jenkins job get's aborted if
# containers are run in the foreground.
CID=$(set -x
      docker run -it -d -v $WORKSPACE:/workspace \
                        -v $BUILD_CACHE_DIR:/cache \
                        -w /workspace \
                        -e 'CI=true' \
                        -e 'WORKSPACE=/workspace' \
                        $DOCKER_OPTS "$DOCKER_IMG" \
                        bash -c "INIT=/usr/local/bin/init-container ;\
                        [ -e \$INIT ] && \$INIT ;\
                        ( \
                          set -e -x ;\
                          $* \
                        ); \
                        JOB_RESULT=\$? ; chown -R $(id -u) /workspace ;\
                        exit \$JOB_RESULT")

# This is used for debugging. If you run this script locally while setting up or
# debugging your CI build environment you could pass 'bash' as CI command and get
# an interactive environment.
if [ "$1" = "bash" ]; then
  docker attach $CID
fi

# Tail the logs of the container so we can see the build output
docker logs -f $CID &

# Wait for the container to exit when the CI command is done.
exitcode=$(docker wait $CID)

if [ "$exitcode" -eq 0 ]; then
  echo "${GREEN}$0: finished successfully${NORMAL}" >&2
else
  echo "${RED}$0: failed with exit code $exitcode${NORMAL}" >&2
  exit $exitcode
fi

